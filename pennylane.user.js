// ==UserScript==
// @name     Pennylane
// @version  0.1.4
// @grant    unsafeWindow
// @grant    GM.openInTab
// @match    https://app.pennylane.com/companies/*
// @icon     https://app.pennylane.com/favicon.ico
// ==/UserScript==

const code = ';(function IIFE() {'+"const $ = document.querySelector.bind(document);\nconst $$ = (...args) => Array.from(document.querySelectorAll(...args));\n\n// get out of DOMCOntentLoaded : https://github.com/greasemonkey/greasemonkey/issues/1584#issuecomment-7513483\nsetTimeout(init, 0);\n\nfunction init () {\n  last_7_days_filter();\n}\n\n/**\n * Parse and enable LAST_7_DAYS filter on transactions page\n *\n * :Adding `date=LAST_7DAYS` in param url will auto filter transaction\n */\nfunction last_7_days_filter () {\n  const url = new URL(location.href);\n  //if (!new RegExp('^/companies/\\\\d+/clients/transactions$').test(url.pathname)) return;\n  if (url.searchParams.get('date') !== 'LAST_7_DAYS') return;\n  const zone = new Date().toString().replace(/^.*GMT(...)(..).*$/, '$1:$2');\n  const today = new Date(Math.floor(Date.now() / 86_400_000) * 86_400_000);\n  const start = new Date(today - (86_400_000 * 7)).toISOString().replace('.000Z', zone);\n  const end = today.toISOString().replace('.000Z', zone);\n  const filter = url.searchParams.has('filter') ? JSON.parse(url.searchParams.get('filter')) : [];\n  filter.splice(filter.findIndex(item => item.field === 'date'), 1);\n  filter.splice(filter.findIndex(item => item.field === 'date'), 1);\n  filter.push({field: 'date', operator: 'gteq', value: start},{field: 'date', operator: 'lteq', value: end});\n  url.searchParams.set('filter', JSON.stringify(filter));\n  url.searchParams.delete('date');\n  location.replace(url);\n}\n\nlet apiRequestWait = false;\nasync function apiRequest (endpoint, data, method = 'POST') {\n  if (apiRequestWait) await apiRequestWait;\n  const response = await fetch(`https://app.pennylane.com/companies/21936866/${endpoint}`, {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-COMPANY-CONTEXT-DATA-UPDATED-AT\": \"2024-03-25T20:22:38.289Z\",\n      \"X-PLAN-USED-BY-FRONT-END\": \"v1_saas_free\",\n      \"X-FRONTEND-LAST-APPLICATION-LOADED-AT\": \"2024-03-25T20:22:37.968Z\",\n      \"X-CSRF-TOKEN\": getCookies().my_csrf_token,\n      \"X-DEPLOYMENT\": \"2023-04-19\",\n      \"X-SOURCE-VERSION\": \"e0c18c0\",\n      \"X-SOURCE-VERSION-BUILT-AT\": \"2024-03-25T18:05:09.769Z\",\n      \"X-DOCUMENT-REFERRER\": location.origin + location.pathname,\n      Accept: 'application/json'\n    },\n    body: data ? JSON.stringify(data) : data,\n  });\n  if (response.status === 429) {\n    console.log('apiRequest response status is not 200', {response});\n    apiRequestWait = new Promise(rs => setTimeout(rs, 1000));\n    return apiRequest(endpoint, data, method);\n  }\n  return response;\n}\n\nfunction getCookies () {\n  return document.cookie.split(';')\n      .map(elem => elem.split('='))\n      .reduce((cookies, [key, value]) => Object.assign(cookies, { [key.trim()]: value }), {});\n}\nwindow.apiRequest = apiRequest;\n\n/** Add 'add by ID' button on transaction reconciliation tab */\nsetInterval(function () {\n  const button = Array.from(document.querySelectorAll('button'))\n    .find(b => b.textContent.includes('Chercher parmi les factures') || b.textContent === 'Voir plus de factures');\n  if (!button) return;\n  const div = button.closest('.mt-2');\n  if (div.childElementCount > 2) return;\n\n  div.insertBefore(\n    parseHTML('<div class=\"btn-sm w-100 btn-primary\" style=\"cursor: pointer;\">Ajouter par ID</div>'),\n    div.lastElementChild\n  );\n  const addButton = div.lastElementChild.previousElementSibling;\n  addButton.addEventListener('click', () => { addById(); });\n}, 200);\n\nasync function addById () {\n  const id = prompt('ID du justificatif ?');\n  const guuid = await getGUUID(id);\n  const localId = (new URL(location.href)).searchParams.get('transaction_id');\n  await apiRequest(\n    `documents/${localId}/matching`,\n    { matching:{unmatch_ids:[], group_uuids:[guuid] } },\n    'PUT'\n  );\n}\n\nasync function mergeInvoices () {\n  const button = Array.from(document.getElementsByTagName('button'))\n    .find(b => b.textContent.includes('Chercher parmi les factures'));\n  const component = button.closest('.px-2.py-3');\n  const items = getReactProps(component).panelTransaction.grouped_documents;\n  const invoices = items.filter(item => item.type === 'Invoice').map(invoice => invoice.id);\n  const response = await apiRequest(\n    'accountants/invoices/merge_files',\n    {invoice_ids: invoices}\n  );\n  console.log('mergeInvoices', {response});\n}\n\nasync function getGUUID (documentId) {\n  const response = await apiRequest(`documents/${documentId}`, null, 'GET');\n  const data = await response.json();\n  console.log('getGUUID', {data});\n  return data.group_uuid;\n}\n\nfunction getReact (elem, up = 0) {\n  if (!elem) return null;\n  const keys = Object.getOwnPropertyNames(elem);\n  const fiberKey = keys.find(key => key.startsWith('__reactFiber'));\n\n  const fiber = elem[fiberKey];\n  let component = fiber.return;\n  for (let i = 0; i < up; ++i) component = component.return;\n  return component;\n}\nwindow.getReact = getReact;\n\nfunction getReactProps (elem, up = 0) {\n  return getReact(elem, up)?.memoizedProps;\n}\nwindow.getReactProps = getReactProps;\n\n\n/** Add infos on Invoice full page display */\nsetInterval(async () => {\n  const isCustomer = Boolean(findElem('button', 'Voir / Modifier le client'));\n  const infos = Array.from(document.querySelectorAll('h4.heading-section-3.mr-2'))\n    .find(title => title.textContent === 'Informations');\n  if (!infos) return;\n\n  const {invoice} = getReact(infos, 32).memoizedProps;\n  if ($('#invoice-id')) {\n    const isValidTag = $('#is-valid-tag');\n    if (isValidTag && isValidTag.invoice !== invoice) {\n      console.log('isValidTag desynchonized');\n      isValidTag.parentElement.remove();\n    }\n    return;\n  }\n  console.log({invoice});\n\n  const tagsContainer = infos.nextSibling;\n  tagsContainer.insertBefore(\n    parseHTML(`<div class=\"sc-iGgVNO clwwQL d-flex align-items-center gap-1\"></div>`),\n    tagsContainer.firstChild\n  );\n  tagsContainer.firstChild.appendChild(\n    parseHTML(\n      `<div id=\"invoice-id\" class=\"d-inline-block bg-secondary-100 dihsuQ px-0_5\">\n        #${invoice.id}\n      </div>`\n    )\n  );\n  const isValid = await (isCustomer ? customerInvoiceIsValid : supplierInvoiceIsValid)(invoice);\n  const reason = (isValid || isCustomer) ? '' : await supplierInvoiceInvalidReason(invoice);\n  tagsContainer.firstChild.insertBefore(\n    parseHTML(\n      `<div id=\"is-valid-tag\" class=\"d-inline-block bg-secondary-100 dihsuQ px-0_5\">\n        ${isValid ? '✓' : 'x&nbsp;'+reason}\n      </div>`\n    ),\n    tagsContainer.firstChild.firstChild\n  );\n  $('#is-valid-tag').invoice = invoice;\n}, 50);\n\nfunction findElem (selector, text) {\n  return Array.from(document.querySelectorAll(selector) ?? []).find(elem => elem.textContent === text);\n}\n\nasync function getDocument (id) {\n  const response = await apiRequest(`documents/${id}`, null, 'GET');\n  return await response.json();\n}\nwindow.getDocument = getDocument;\n\n/**\n * Parse an HTML string and return a DocumentFragment which can be inserted in the DOM as is\n *\n * @param {string} html The HTML string to parse\n *\n * @return {DocumentFragment} The parsed HTML fragment\n */\nfunction parseHTML(html) {\n    const template = document.createElement('template');\n    template.innerHTML = html;\n    return template.content;\n}\n\nasync function supplierInvoiceIsValid (invoice) {\n  return !(await supplierInvoiceInvalidReason(invoice));\n}\n\nasync function supplierInvoiceInvalidReason (invoice) {\n  if (!invoice) console.log('supplierInvoiceInvalidReason', {invoice});\n\n  // Archived and replaced\n  if (invoice.archived && invoice.invoice_number?.startsWith('§')) return null;\n\n  // exclude 6288\n  if (invoice.invoice_lines?.some(line => line.pnl_plan_item?.number == '6288')) return 'compte tiers 6288';\n\n  // Aides octroyées sans label\n  if (invoice.thirdparty?.id === 106438171) {\n    const ledgerEvents = await getLedgerEvents(invoice.id);\n    const line = ledgerEvents.find(event => event.planItem.number === '6571');\n    if (!line) return 'écriture \"6571\" manquante';\n    if (!line.label) return 'nom du bénéficiaire manquant dans l\\'écriture \"6571\"';\n  }\n\n  // Ecarts de conversion de devise\n  if (invoice.currency !== 'EUR') {\n    const ledgerEvents = await getLedgerEvents(invoice.id);\n    const diffLine = ledgerEvents.find(line => line.planItem.number === '4716001');\n    console.log({diffLine});\n    if (diffLine) {\n      if (parseFloat(diffLine.amount) < 0)\n        return 'Les écarts de conversions de devises doivent utiliser le compte 477';\n      else\n        return 'Les écarts de conversions de devises doivent utiliser le compte 476';\n    }\n    console.log({ledgerEvents});\n  }\n\n  // Known orphan invoice\n  if (invoice.invoice_number?.startsWith('¤')) return null;\n\n  // Stripe fees invoice\n  if (invoice.thirdparty?.id === 115640202) return null;\n\n  // ID card\n  if (invoice.thirdparty?.id === 106519227 && invoice.invoice_number?.startsWith('ID ')) return null;\n\n  // Has transaction attached\n  if ((await getDocument(invoice.id)).grouped_documents?.some(doc => doc.type === 'Transaction'))\n    return null;\n\n  return 'pas de transaction attachée';\n}\n\n/** Add \"has transaction\" symbol on status column whith the invoices list */\nsetInterval(() => {\n  const isSupplierInvoices = Boolean(findElem('h3', 'Factures fournisseurs'));\n  const isCustomerInvoices = Boolean(findElem('h3', 'Factures clients'));\n  if (!isCustomerInvoices && !isSupplierInvoices) return;\n  const itemsStatuses = Array.from(document.querySelectorAll('div[data-intercom=\"invoices-list-status\"]'));\n  itemsStatuses.forEach(async cell => {\n    if (cell.querySelector('.has-transaction-status')) return;\n    const invoice = getReactProps(cell, 2).original;\n    const isValid = await (isSupplierInvoices ? supplierInvoiceIsValid(invoice) : customerInvoiceIsValid(invoice));\n    if (cell.querySelector('.has-transaction-status')) return;\n    cell.firstElementChild.firstElementChild.insertBefore(\n      parseHTML(`<span class=\"has-transaction-status\">${isValid ? '✓&nbsp;' : 'x&nbsp;'}</span>`),\n      cell.firstElementChild.firstElementChild.firstChild\n    );\n  });\n}, 200);\n\nasync function customerInvoiceIsValid (invoice) {\n  // don manuel\n  if (invoice.thirdparty?.id === 103165930 && !invoice.date && !invoice.deadline) return true;\n\n  // piece id\n  if (invoice.thirdparty?.id === 113420582 && !invoice.date && !invoice.deadline && invoice.invoice_number?.startsWith('ID ')) return true;\n  return false;\n}\n\nlet loadingInvoiceValidation = null;\n/** Add \"next invalid invoice\" button on invoices list */\nsetInterval(async () => {\n  if (!findElem('h4', 'Informations')) return;\n  const nextButton = $('div>span+button+button:last-child');\n  if (!nextButton) return;\n  nextButton.parentElement.insertBefore(parseHTML(\n    `<button type=\"button\" class=\"sc-jlZhRR izKsrp justify-content-center btn btn-primary btn-sm\">&nbsp;&gt;&nbsp;</button>`\n  ), nextButton.previousElementSibling);\n  const nextInvalidButton = nextButton.previousElementSibling.previousElementSibling;\n  nextInvalidButton.addEventListener('click', nextInvalidInvoice);\n  loadingInvoiceValidation = loadInvoiceValidation();\n  document.addEventListener('click', function cb () {\n    nextInvalidInvoice();\n    document.removeEventListener('click', cb);\n  });\n}, 200);\n\nasync function loadInvoiceValidation () {\n  const direction = getParam(location.href, 'direction') ?? 'supplier';\n  const isValid = direction === 'customer' ? customerInvoiceIsValid : supplierInvoiceIsValid;\n  const cache = JSON.parse(localStorage.getItem('invoicesValidation') ?? '{}');\n  const startPage = Math.max.apply(Math, Object.entries(cache)\n    .filter(([id, status]) => status.direction === direction)\n    .map(([id, status]) => status.page)\n  );\n  await findInvoice({direction, page: isNaN(startPage) ? 1 : startPage}, async (invoice, page) => {\n    if (invoice.id == getParam(location.href, 'id')) return false;\n    if (!(invoice.id in cache) || !cache[invoice.id]) {\n      cache[invoice.id] = { page, direction, valid: await isValid(invoice) };\n      localStorage.setItem('invoicesValidation', JSON.stringify(cache));\n    }\n    return false;\n  });\n}\n\nasync function nextInvalidInvoice () {\n  console.log('nextInvalidInvoice');\n  let cache = JSON.parse(localStorage.getItem('invoicesValidation') ?? '{}');\n  let invalid = getRandomArrayItem(Object.entries(cache).filter(([id, status]) => !status.valid));\n  if (!invalid) {\n    await loadingInvoiceValidation;\n    cache = JSON.parse(localStorage.getItem('invoicesValidation') ?? '{}');\n    invalid = getRandomArrayItem(Object.entries(cache).filter(([id, status]) => !status.valid));\n  }\n  if (!invalid) {\n    if (!confirm('Toutes les factures semblent être valides. Revérifier tout ?')) return;\n    localStorage.setItem('invoicesValidation', '{}');\n    await Promise.race([\n      loadInvoiceValidation(),\n      new Promise(async rs => {\n        while (!invalid) {\n          await new Promise(to => setTimeout(to, 2000));\n          cache = JSON.parse(localStorage.getItem('invoicesValidation') ?? '{}');\n          invalid = getRandomArrayItem(Object.entries(cache).filter(([id, status]) => !status.valid));\n        }\n        rs();\n      }),\n    ]);\n  }\n  if (!invalid) {\n    alert('Toutes les factures sont valides selon les critères actuels.');\n    return;\n  }\n  const direction = getParam(location.href, 'direction');\n  const isValid = direction === 'customer' ? customerInvoiceIsValid : supplierInvoiceIsValid;\n  if (await isValid(await getInvoice(invalid[0]))) {\n    cache[invalid[0]].valid = true;\n    localStorage.setItem('invoicesValidation', JSON.stringify(cache));\n    return nextInvalidInvoice();\n  }\n  const url = location.href.replace(/accountants.*$/, `documents/${invalid[0]}.html`);\n  document.body.appendChild(parseHTML(`<div class=\"open_tab\" data-url=\"${escape(url)}\" style=\"display: none;\"></div>`));\n}\n\nfunction getRandomArrayItem (array) {\n  if (!array.length) return null;\n  const index = Math.floor(Math.random() * array.length);\n  return array[index];\n}\n\nfunction getParam (url, paramName) {\n  return new URL(url).searchParams.get(paramName);\n}\n\nasync function findInvoice (params, cb) {\n  const url = new URL(`http://a.a/accountants/invoices/list?page=1`);\n  Object.entries(params).forEach(([key, value]) => url.searchParams.set(key, value));\n  let page = parseInt(url.searchParams.get('page'));\n  if (isNaN(page)) {\n    console.error('findInvoice page is NaN', {params, url, page});\n    page = 1;\n  }\n  let response, data, invoices;\n  do {\n    response = await apiRequest(url.toString().replace('http://a.a/', ''), null, 'GET');\n    data = await response.json();\n    invoices = data.invoices;\n    if (!invoices?.length) return null;\n    console.log('findInvoice page', {page, response, data, invoices});\n    for (const invoice of invoices) if (await cb(invoice, page)) return invoice;\n    page += 1;\n    url.searchParams.set('page', page);\n  } while (page <= data.pagination.pages);\n}\n\n/** Add \"Archive\" button on bonded invoice in transaction pannel */\nsetInterval(() => {\n  if (!findElem('h3', 'Transactions')) return;\n  $$('div>a+button>svg').map(svg => svg.closest('div')).forEach((buttonsBlock, id) => {\n    if (!buttonsBlock || buttonsBlock.children.length > 2) return;\n    buttonsBlock.insertBefore(\n      parseHTML(`<button id=\"archive-button-${id}\">&nbsp;x&nbsp;</button>`),\n      buttonsBlock.firstElementChild\n    );\n    buttonsBlock.querySelector(`#archive-button-${id}`).addEventListener('click', async () => {\n      const invoice = await getInvoice(getReactProps(buttonsBlock, 4).invoiceId);\n      const replacement = prompt('ID du justificatif ?');\n      await updateInvoice(invoice.id, {\n        invoice_number: `§ ${replacement ? '#'+replacement+' - ' : ''}${invoice.invoice_number}`\n      });\n      await archiveDocument(invoice.id);\n      console.log('archive invoice', getReactProps(buttonsBlock, 4).invoiceId, {invoice});\n    });\n\n    detailsBlock = upElement(buttonsBlock, 3).children[1];\n    const invoice = getReactProps(detailsBlock, 11)?.invoice;\n    detailsBlock.firstChild.lastElementChild.appendChild(parseHTML(\n      `&nbsp;<span class=\"invoice-id d-inline-block bg-secondary-100 dihsuQ px-0_5\">\n        #${invoice.id}\n      </span>`\n    ));\n  });\n}, 200);\n\nfunction upElement (elem, upCount) {\n  let retval = elem;\n  for (i = 0; i < upCount; ++i) retval = retval?.parentElement;\n  return retval;\n}\n\nasync function getInvoice (id) {\n  if (!id) {\n    console.error('Error: getInvoice() invalid id', {id});\n    return null;\n  }\n  const response = await apiRequest(`/accountants/invoices/${id}`, null, 'GET');\n  const data = await response.json();\n  return data.invoice;\n}\n\nasync function updateInvoice (id, data) {\n  await apiRequest(`/accountants/invoices/${id}`, data, 'PUT');\n}\n\nasync function archiveDocument (id, unarchive = false) {\n  await apiRequest('documents/batch_archive', { documents: [{id}], unarchive }, 'POST');\n}\n\nasync function getLedgerEvents (documentId) {\n  const documents = (await getDocument(documentId))?.grouped_documents ?? [];\n  const documentsIds = documents.map(document => document.id);\n  const events = await Promise.all(documentsIds.map(async id => {\n    const response = await apiRequest(`accountants/operations/${id}/ledger_events`, null, 'GET');\n    return await response.json();\n  }));\n  return [].concat(...events);\n}\n\nwindow.getLedgerEvents = getLedgerEvents;\n"+'})();';
try {
  setInterval(() => {
    const data = document.querySelector('.open_tab');
    if (!data) return;
    const url = unescape(data.dataset.url);
    console.log('GM_openInTab', {data, url});
    data.remove();
    GM.openInTab(url, { active: false, insert: true });
  }, 2000);
  unsafeWindow.eval(code);
  console.log('GM SUCCESS');
} catch (error) {
  console.log('GM ERROR');
  console.log({error, line: code.split('\n')[error.lineNumber-1]});
}
